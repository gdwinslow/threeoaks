<?xml version="1.0"?>
<package>
<?component error="true" debug="true"?>
<comment>
///////////////////////////////////////////////////////////////////////////////////////////////
//
// NOAA Weather Provider
//
// Copyright (c) 2009-2010, Julien Templier
// All rights reserved.
//
///////////////////////////////////////////////////////////////////////////////////////////////
//
// Redistribution and use in source and binary forms, with or without modification, are
// permitted provided that the following conditions are met:
// 1. Redistributions of source code must retain the above copyright notice, this list of
//    conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright notice, this list
//    of conditions and the following disclaimer in the documentation and/or other materials
//    provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products derived from this
//    software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
// OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
// COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
// GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
// ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
// OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.
//
///////////////////////////////////////////////////////////////////////////////////////////////
</comment>

<component id="NOAA">
	<comment>
		NOAA Weather Provider
	</comment>
	<registration description="NOAA Weather Provider"
      			  progid="DXWeatherProvider.NOAA"
      			  version="1"
      	    	  classid="{7877D04D-AC0F-43c6-83F5-F511B9677230}"/>


	<object id="m_locations" 	progid="Scripting.Dictionary" />
    <object id="m_alerts" 		progid="Scripting.Dictionary" />
    <object id="m_forecast" 	progid="Scripting.Dictionary" />

    <object id="m_request" 		progid="Microsoft.XmlDom" />

	<public>
		<property name="ID">
			<get />
		</property>

		<property name="Name">
			<get />
		</property>

		<property name="UseMetricSystem" internalName="m_useMetricSystem" />

		<method name="SetLicense">
			<parameter name="id" />
			<parameter name="key" />
		</method>

		<method name="RegisterCallbacks">
			<parameter name="locationCallback" />
			<parameter name="weatherCallback" />
			<parameter name="alertsCallback" />
			<parameter name="forecastCallback" />
			<parameter name="camerasCallback" />
			<parameter name="errorCallback" />
		</method>

		<method name="Abort" />

		<comment>
			Query can be one of the following:
				-
		</comment>
		<method name="GetLocations">
			<parameter name="locationQuery" />
		</method>

		<comment>
			Query can be one of the following:
				-
		</comment>
		<method name="GetWeather">
			<parameter name="locationQuery" />
		</method>

		<comment>
			Query can be one of the following:
				-
		</comment>
		<method name="GetAlerts">
			<parameter name="locationQuery" />
		</method>

		<comment>
			Query can be one of the following:
				-
		</comment>
		<method name="GetForecast">
			<parameter name="locationQuery" />
		</method>

		<comment>
			Not supported by NOAA
		</comment>
		<method name="GetCameras">
			<parameter name="locationQuery" />
		</method>

	</public>

	<resource id="provider_id">NOAA</resource>
	<resource id="provider_name">NOAA's National Weather</resource>
	<resource id="url_locations"></resource>
	<resource id="url_weather"></resource>
	<resource id="url_station"></resource>
	<resource id="url_alerts"></resource>
	<resource id="url_forecast"></resource>

	<script language="JScript">
	<![CDATA[

	//**Start Encode**

	var Constants 			= getComponent("WeatherConstants");

	// Data
	var m_weather   		= null;
	var m_lastUpdateTime	= null;

	// Helper
	var m_helper			= getComponent("WeatherHelper");

	// callbacks
	var m_locationsCallback = null;
	var m_weatherCallback 	= null;
	var m_alertsCallback 	= null;
	var m_forecastCallback  = null;
	var m_camerasCallback   = null;
	var m_errorCallback 	= null;

	var m_useMetricSystem = true;

	///////////////////////////////
	// Utilities
	///////////////////////////////
	function getComponent(id) {
		//#ifdef DEBUG
		var LIB_FOLDER = "D:/Sources/Company/src/trunk/src/DesktopX/DXScriptLibrary/Weather/";
		return GetObject("script:" + LIB_FOLDER + "/Weather.wsc#" + id);
		//#else
		//return createComponent(id);
		//#endif
	}

	function getQueryString(query) {
		return "";
	}

	///////////////////////////////
	// Properties
	///////////////////////////////
	function get_ID() {
		return getResource("provider_id");
	}

	function get_Name() {
		return getResource("provider_name");
	}

	///////////////////////////////
	// Public functions
	///////////////////////////////

	// Setup license
	function SetLicense(id, key) {
		// Not used by this provider: always return E_OK
		return Constants.E_OK;
	}

	// Set callbacks
	function RegisterCallbacks(locationsCallback, weatherCallback, alertsCallback, forecastCallback, camerasCallback, errorCallback) {
		m_locationsCallback = locationsCallback;
		m_weatherCallback 	= weatherCallback;
		m_alertsCallback 	= alertsCallback;
		m_forecastCallback  = forecastCallback;
		m_camerasCallback   = camerasCallback;
		m_errorCallback 	= errorCallback;
	}

	// Abort current request
	function Abort() {
		m_request.abort();
	}

	/////////////////////////////////////////////////////////////////////////////////////////////////////
	// Get a list of locations
	/////////////////////////////////////////////////////////////////////////////////////////////////////
	function GetLocations(locationQuery) {
		// Clear any previous results
		m_locations.RemoveAll();

		// Check query for validity
		if (getQueryString(locationQuery) == "")
			return Constants.E_NOTAVAILABLE;

		// Reset dom
		m_request.abort();

		m_request.onreadystatechange = OnLocationsResponse;
		m_request.async = true;
		m_request.load(getResource("url_locations") + getQueryString(locationQuery));

		return Constants.E_OK;
	}

	function OnLocationsResponse() {
		if (m_request.readyState != 4)
			return;

		if (!m_helper.CheckParserError(m_request, m_errorCallback, Constants))
			return;

		// TODO: Implementation

		m_locationsCallback(m_locations);
	}

	/////////////////////////////////////////////////////////////////////////////////////////////////////
	// Get the current weather
	/////////////////////////////////////////////////////////////////////////////////////////////////////
	function GetWeather(locationQuery) {

		// Reset weather object
		m_weather = null;
		m_weather = getComponent("WeatherInfo");

		// Check query for validity
		if (getQueryString(locationQuery) == "")
			return Constants.E_NOTAVAILABLE;

		// Reset dom
		m_request.abort();

		m_request.onreadystatechange = OnWeatherResponse;
		m_request.async = true;
		m_request.load(getResource("url_weather") + getQueryString(locationQuery));

		return Constants.E_OK;
	}

	function OnWeatherResponse() {
		if (m_request.readyState != 4)
			return;

		if (!m_helper.CheckParserError(m_request, m_errorCallback, Constants))
			return;

		// TODO: Implementation

		m_weatherCallback(m_weather);
	}

	/////////////////////////////////////////////////////////////////////////////////////////////////////
	// Get a list of alerts
	/////////////////////////////////////////////////////////////////////////////////////////////////////
	function GetAlerts(locationQuery) {
		return Constants.E_NOTIMPLEMENTED;
	}

	/////////////////////////////////////////////////////////////////////////////////////////////////////
	// Get the forecast
	/////////////////////////////////////////////////////////////////////////////////////////////////////
	function GetForecast(locationQuery) {
		// Clear any previous results
		m_forecast.RemoveAll();

		// Check query for validity
		if (getQueryString(locationQuery) == "")
			return Constants.E_NOTAVAILABLE;

		// Reset dom
		m_request.abort();

		m_request.onreadystatechange = OnForecastResponse;
		m_request.async = true;
		m_request.load(getResource("url_forecast") + getQueryString(locationQuery));

		return Constants.E_OK;
	}

	function OnForecastResponse() {
		if (m_request.readyState != 4)
			return;

		if (!m_helper.CheckParserError(m_request, m_errorCallback, Constants))
			return;

		// TODO: Implementation

		m_forecastCallback(m_forecast);
	}

	/////////////////////////////////////////////////////////////////////////////////////////////////////
	// Get a list of cameras
	/////////////////////////////////////////////////////////////////////////////////////////////////////
	function GetCameras(locationQuery) {
		return Constants.E_NOTIMPLEMENTED;
	}

	]]>
	</script>

</component>

</package>
