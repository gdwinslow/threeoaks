<?xml version="1.0"?>
<package>
<?component error="true" debug="true"?>
<comment>
///////////////////////////////////////////////////////////////////////////////////////////////
//
// Weather Script Component
//
// Copyright (c) 2009-2010, Julien Templier
// All rights reserved.
//
///////////////////////////////////////////////////////////////////////////////////////////////
//
// Redistribution and use in source and binary forms, with or without modification, are
// permitted provided that the following conditions are met:
// 1. Redistributions of source code must retain the above copyright notice, this list of
//    conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright notice, this list
//    of conditions and the following disclaimer in the documentation and/or other materials
//    provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products derived from this
//    software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
// OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
// COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
// GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
// ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
// OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.
//
///////////////////////////////////////////////////////////////////////////////////////////////
</comment>

<component id="WeatherController">
	<comment>
	Main weather controller
	</comment>
	<registration description="Weather Controller"
				  progid="DXWeather.Controller"
				  version="1"
				  classid="{2DB557E8-FA03-40ce-B559-D0BCCFCB48CC}"/>

	<object id="m_providers" 	progid="Scripting.Dictionary" />
	<object id="m_providerList" progid="Scripting.Dictionary" />

	<public>
		<comment>
			Unit system in use

			Default is metric system. Set to False to use the English/Imperial unit system.
		</comment>
		<property name="UseMetricSystem">
			<get />
			<put />
		</property>

		<comment>
			Setup the license
			  - id: partner id
			  - key: license key

			returns: E_OK if the license was set properly
					 E_INVALIDLICENSE if license information is missing
					 E_ERROR if no provider has been set

			You can use that method to check whether the current provider needs license information.

			Ex: Try calling the method first with empty information: SetLicense("", ""). If you get E_OK,
			no license information is needed, otherwise, you need to provide some license information.
			You can check if id, key or both are needed in the same way.
		</comment>
		<method name="SetLicense">
			<parameter name="id" />
			<parameter name="key" />
		</method>

		<comment>
			Returns a dictionnary of available providers (key = provider id, value = provider name)
		</comment>
		<property name="Providers">
			<get />
		</property>

		<comment>
			Set the provider to use
			  - id: provider id (key) as retrieved bu GetProviders

			returns: E_OK if the provider was set correctly
					 E_ERROR if the id is not a valid provider id (the current provider will be reset to Nothing)
		</comment>
		<method name="SetProvider">
			<parameter name="id" />
		</method>

		<comment>
			Register callbacks for weather controller calls
			  - locationCallback(WeatherLocation[] locations)
					called when new location results are available

			  - weatherCallback(WeatherInfo weather)
					called when new weather information is available

			  - alertsCallback(WeatherAlert[] alerts)
					called when new alert information is available

			  - forecastCallback(WeatherInfo[] forecast)
					called when new forecast information is available

			  - camerasCallback(WeatherCamera[] cameras)
					called when new camera results are available

			  - errorCallback(int errorCode, string errorMessage)
					called when an error is raised during an operation
		</comment>
		<method name="RegisterCallbacks">
			<parameter name="locationCallback" />
			<parameter name="weatherCallback" />
			<parameter name="alertsCallback" />
			<parameter name="forecastCallback" />
			<parameter name="camerasCallback" />
			<parameter name="errorCallback" />
		</method>

		<comment>
			Get a WeatherLocation object to be used in a query
		</comment>
		<method name="GetQueryObject" />

		<comment>
			Get a list of locations.
			  - locationQuery: a WeatherLocation object with the proper fields set

			returns: E_OK if the request was send
					 E_NOTAVAILABLE if the query type is not supported by the current provider
					 E_INVALIDLICENSE if license information is missing
					 E_ERROR if no provider has been set
		</comment>
		<method name="GetLocations">
			<parameter name="locationQuery" />
		</method>

		<comment>
			Get the current weather
			  - locationQuery: a WeatherLocation object with the proper fields set
								 (this can be a WeatherLocation object returned by GetLocations)

			returns: E_OK if the request was send
					 E_NOTIMPLEMENTED if this function is not implemented for the current provider
					 E_NOTAVAILABLE if the query type is not supported by the current provider
					 E_INVALIDLICENSE if license information is missing
					 E_ERROR if no provider has been set
		</comment>
		<method name="GetWeather">
			<parameter name="locationQuery" />
		</method>

		<comment>
			Get a list of alerts
			  - locationQuery: a WeatherLocation object with the proper fields set
								 (this can be a WeatherLocation object returned by GetLocations)

			returns: E_OK if the request was send
					 E_NOTIMPLEMENTED if this function is not implemented for the current provider
					 E_NOTAVAILABLE if the query type is not supported by the current provider
					 E_INVALIDLICENSE if license information is missing
					 E_ERROR if no provider has been set
		</comment>
		<method name="GetAlerts">
			<parameter name="locationQuery" />
		</method>

		<comment>
			Get the forecast
			  - locationQuery: a WeatherLocation object with the proper fields set
								(this can be a WeatherLocation object returned by GetLocations)

			returns: E_OK if the request was send
					 E_NOTIMPLEMENTED if this function is not implemented for the current provider
					 E_NOTAVAILABLE if the query type is not supported by the current provider
					 E_INVALIDLICENSE if license information is missing
					 E_ERROR if no provider has been set
		</comment>
		<method name="GetForecast">
			<parameter name="locationQuery" />
		</method>

		<comment>
			Get a list of cameras.
			  - locationQuery: a WeatherLocation object with the proper fields set
								 (this can be a WeatherLocation object returned by GetLocations)

			returns: E_OK if the request was send
					 E_NOTIMPLEMENTED if this function is not implemented for the current provider
					 E_NOTAVAILABLE if the query type is not supported by the current provider
					 E_INVALIDLICENSE if license information is missing
					 E_ERROR if no provider has been set
		</comment>
		<method name="GetCameras">
			<parameter name="locationQuery" />
		</method>

		<comment>
			Abort any operation that is in progress

			returns: E_OK if the function succeeded
					 E_ERROR if no provider has been set
		</comment>
		<method name="Abort" />

		<comment>
			Add a new provider
			  - id: provider id
			  - provider: provider script component instance

			This is targeted to developers, allowing them to develop a new weather provider without having to modify this file

			returns: E_OK if the provider was added correctly
					 E_ERROR if the id already exists
		</comment>
		<method name="AddProvider">
			<parameter name="provider" />
		</method>
	</public>

	<script language="JScript">
	<![CDATA[

	//**Start Encode**

	// Error
	var Constants = createComponent("WeatherConstants");

	// Callbacks
	var m_locationsCallback = null;
	var m_weatherCallback = null;
	var m_alertsCallback = null;
	var m_forecastCallback = null;
	var m_camerasCallback = null;
	var m_errorCallback = null;

	// Current provider
	var m_currentProvider = null;
	var m_useMetricSystem = true;

	// License information
	var m_id = "";
	var m_key = "";

	Init();

	/////////////////////////////////////////////////////////////////////////////////////////
	// Provider registration
	function Init() {
		//#ifndef DEBUG
		//AddProvider(createComponent("TWC"));
		//AddProvider(createComponent("WUnderground"));
		//AddProvider(createComponent("NOAA"));
		//#endif
	}

	/*=============================================================================================================================
	=
	= Public Methods
	=
	=============================================================================================================================*/

	// Get the unit system in use
	function get_UseMetricSystem() {
		return m_useMetricSystem;
	}

	function put_UseMetricSystem(system) {
		m_useMetricSystem = system;

		// Update the provider
		if (m_currentProvider != null)
			m_currentProvider.UseMetricSystem = m_useMetricSystem;
	}

	// Get the list of available providers
	function get_Providers() {
		return m_providerList;
	}

	// Setup license
	function SetLicense(id, key) {
		m_id = id;
		m_key = key;

		// Update license information
		if (m_currentProvider == null)
			return Constants.E_ERROR;

		return m_currentProvider.SetLicense(m_id, m_key);
	}

	// Set the provider to use
	function SetProvider(id) {
		if (!m_providers.Exists(id)) {
			// Reset the current provider
			m_currentProvider = null;

			return Constants.E_ERROR;
		}

		m_currentProvider = m_providers.Item(id);
		m_currentProvider.UseMetricSystem = m_useMetricSystem;
		m_currentProvider.SetLicense(m_id, m_key);

		// Register callbacks
		// we have to do that and duplicate all the registration code in all providers,
		// since we cannot use events without registering the component
		m_currentProvider.RegisterCallbacks(OnLocations,
											OnWeather,
											OnAlerts,
											OnForecast,
											OnCameras,
											OnError);

		return Constants.E_OK;
	}

	// Set the callbacks
	function RegisterCallbacks(locationsCallback, weatherCallback, alertsCallback, forecastCallback, camerasCallback, errorCallback) {
		m_locationsCallback = locationsCallback;
		m_weatherCallback 	= weatherCallback;
		m_alertsCallback 	= alertsCallback;
		m_forecastCallback  = forecastCallback;
		m_camerasCallback   = camerasCallback;
		m_errorCallback 	= errorCallback;
	}

	// Add provider to provider list
	function AddProvider(provider) {
		// Add the new provider to the internal provider list
		m_providers.Add(provider.ID, provider);

		// we use a separate provider list to not expose the providers directly to the user script
		m_providerList.Add(provider.ID, provider.Name);

		return Constants.E_OK;
	}

	// Abort any call in progress
	function Abort() {
		if (m_currentProvider == null)
			return Constants.E_ERROR;

		m_currentProvider.Abort();

		return Constants.E_OK;
	}

	// Get a WeatherLocation object
	function GetQueryObject() {
		return createComponent("WeatherLocation");
	}

	// Get a WeatherHelper object
	function GetHelper() {
		return m_helperObject;
	}

	// Get a list of locations
	function GetLocations(locationQuery) {
		if (m_currentProvider == null)
			return Constants.E_ERROR;

		locationQuery.TrimValues();
		return m_currentProvider.GetLocations(locationQuery);
	}

	// Get the current weather
	function GetWeather(locationQuery) {
		if (m_currentProvider == null)
			return Constants.E_ERROR;

		locationQuery.TrimValues();
		return m_currentProvider.GetWeather(locationQuery);
	}

	// Get a list of alerts
	function GetAlerts(locationQuery) {
		if (m_currentProvider == null)
			return Constants.E_ERROR;

		locationQuery.TrimValues();
		return m_currentProvider.GetAlerts(locationQuery);
	}

	// Get the forecast
	function GetForecast(locationQuery) {
		if (m_currentProvider == null)
			return Constants.E_ERROR;

		locationQuery.TrimValues();
		return m_currentProvider.GetForecast(locationQuery);
	}

	// Get a list of cameras
	function GetCameras(locationQuery) {
		if (m_currentProvider == null)
			return Constants.E_ERROR;

		locationQuery.TrimValues();
		return m_currentProvider.GetCameras(locationQuery);
	}

	/*=============================================================================================================================
	=
	= Callbacks
	=
	=============================================================================================================================*/

	// We check here if the callback are defined, so we can call them without checking if they exist in each provider

	function OnLocations(locations) {
		if (m_locationsCallback != null)
			m_locationsCallback(locations);
	}

	function OnWeather(weather) {
		if (m_weatherCallback != null)
			m_weatherCallback(weather);
	}

	function OnAlerts(alerts) {
		if (m_alertsCallback != null)
			m_alertsCallback(alerts);
	}

	function OnForecast(forecast) {
		if (m_forecastCallback != null)
			m_forecastCallback(forecast);
	}

	function OnCameras(cameras) {
		if (m_camerasCallback != null)
			m_camerasCallback(cameras);
	}

	function OnError(code, value) {
		if (m_errorCallback != null)
			m_errorCallback(code, value);
	}

	]]>
	</script>

</component>

<component id="WeatherConstants">
	<comment>
	Weather constants (error codes, icons code, etc.)
	</comment>
	<registration description="Weather Constants"
				  progid="DXWeather.Constants"
				  version="1"
				  classid="{20AAB6F5-77DB-414e-8469-5D57441BFD19}"/>

	<public>
		<property name="E_OK">
			<get />
		</property>
		<property name="E_ERROR">
			<get />
		</property>
		<property name="E_NOTAVAILABLE">
			<get />
		</property>
		<property name="E_NOTIMPLEMENTED">
			<get />
		</property>
		<property name="E_INVALIDLICENSE">
			<get />
		</property>
		<property name="E_PARSEERROR">
			<get />
		</property>
		<property name="E_WARNING">
			<get />
		</property>

		<property name="DAYPART_DAY">
			<get/>
		</property>
		<property name="DAYPART_NIGHT">
			<get/>
		</property>

		<property name="ICON_TORNADO">
			<get />
		</property>
		<property name="ICON_TROPICAL_STORM">
			<get />
		</property>
		<property name="ICON_HURRICANE">
			<get />
		</property>
		<property name="ICON_SEVERE_THUNDERSTORMS">
			<get />
		</property>
		<property name="ICON_THUNDERSTORMS">
			<get />
		</property>
		<property name="ICON_MIXED_RAIN_AND_SNOW">
			<get />
		</property>
		<property name="ICON_MIXED_RAIN_AND_SLEET">
			<get />
		</property>
		<property name="ICON_MIXED_SNOW_AND_SLEET">
			<get />
		</property>
		<property name="ICON_FREEZING_DRIZZLE">
			<get />
		</property>
		<property name="ICON_DRIZZLE">
			<get />
		</property>
		<property name="ICON_FREEZING_RAIN">
			<get />
		</property>
		<property name="ICON_SHOWERS">
			<get />
		</property>
		<property name="ICON_SHOWERS_2">
			<get />
		</property>
		<property name="ICON_SNOW_FLURRIES">
			<get />
		</property>
		<property name="ICON_LIGHT_SNOW_SHOWERS">
			<get />
		</property>
		<property name="ICON_BLOWING_SNOW">
			<get />
		</property>
		<property name="ICON_SNOW">
			<get />
		</property>
		<property name="ICON_HAIL">
			<get />
		</property>
		<property name="ICON_SLEET">
			<get />
		</property>
		<property name="ICON_DUST">
			<get />
		</property>
		<property name="ICON_FOGGY">
			<get />
		</property>
		<property name="ICON_HAZE">
			<get />
		</property>
		<property name="ICON_SMOKY">
			<get />
		</property>
		<property name="ICON_BLUSTERY">
			<get />
		</property>
		<property name="ICON_WINDY">
			<get />
		</property>
		<property name="ICON_COLD">
			<get />
		</property>
		<property name="ICON_CLOUDY">
			<get />
		</property>
		<property name="ICON_MOSTLY_CLOUDY_NIGHT">
			<get />
		</property>
		<property name="ICON_MOSTLY_CLOUDY_DAY">
			<get />
		</property>
		<property name="ICON_PARTLY_CLOUDY_NIGHT">
			<get />
		</property>
		<property name="ICON_PARTLY_CLOUDY_DAY">
			<get />
		</property>
		<property name="ICON_CLEAR_NIGHT">
			<get />
		</property>
		<property name="ICON_SUNNY">
			<get />
		</property>
		<property name="ICON_FAIR_NIGHT">
			<get />
		</property>
		<property name="ICON_FAIR_DAY">
			<get />
		</property>
		<property name="ICON_MIXED_RAIN_AND_HAIL">
			<get />
		</property>
		<property name="ICON_HOT">
			<get />
		</property>
		<property name="ICON_ISOLATED_THUNDERSTORMS">
			<get />
		</property>
		<property name="ICON_SCATTERED_THUNDERSTORMS_1">
			<get />
		</property>
		<property name="ICON_SCATTERED_THUNDERSTORMS_2">
			<get />
		</property>
		<property name="ICON_SCATTERED_SHOWERS">
			<get />
		</property>
		<property name="ICON_HEAVY_SNOW_1">
			<get />
		</property>
		<property name="ICON_SCATTERED_SNOW_SHOWERS">
			<get />
		</property>
		<property name="ICON_HEAVY_SNOW_2">
			<get />
		</property>
		<property name="ICON_PARTLY_CLOUDY">
			<get />
		</property>
		<property name="ICON_THUNDERSHOWERS">
			<get />
		</property>
		<property name="ICON_SNOW_SHOWERS">
			<get />
		</property>
		<property name="ICON_ISOLATED_THUNDERSHOWERS">
			<get />
		</property>
		<property name="ICON_NOT_AVAILABLE">
			<get />
		</property>

		<property name="ALERT_STATUS_ACTUAL">
			<get />
		</property>
		<property name="ALERT_STATUS_EXERCISE">
			<get />
		</property>
		<property name="ALERT_STATUS_SYSTEM">
			<get />
		</property>
		<property name="ALERT_STATUS_TEST">
			<get />
		</property>
		<property name="ALERT_STATUS_DRAFT">
			<get />
		</property>

		<property name="ALERT_MSG_ALERT">
			<get />
		</property>
		<property name="ALERT_MSG_UPDATE">
			<get />
		</property>
		<property name="ALERT_MSG_CANCEL">
			<get />
		</property>
		<property name="ALERT_MSG_ACK">
			<get />
		</property>
		<property name="ALERT_MSG_ERROR">
			<get />
		</property>

		<property name="ALERT_SCOPE_PUBLIC">
			<get />
		</property>
		<property name="ALERT_SCOPE_RESTRICTED">
			<get />
		</property>
		<property name="ALERT_SCOPE_PRIVATE">
			<get />
		</property>

		<property name="ALERT_CATEGORY_GEO">
			<get />
		</property>
		<property name="ALERT_CATEGORY_MET">
			<get />
		</property>
		<property name="ALERT_CATEGORY_SAFETY">
			<get />
		</property>
		<property name="ALERT_CATEGORY_SECURITY">
			<get />
		</property>
		<property name="ALERT_CATEGORY_RESCUE">
			<get />
		</property>
		<property name="ALERT_CATEGORY_FIRE">
			<get />
		</property>
		<property name="ALERT_CATEGORY_HEALTH">
			<get />
		</property>
		<property name="ALERT_CATEGORY_ENV">
			<get />
		</property>
		<property name="ALERT_CATEGORY_TRANSPORT">
			<get />
		</property>
		<property name="ALERT_CATEGORY_INFRA">
			<get />
		</property>
		<property name="ALERT_CATEGORY_CBRNE">
			<get />
		</property>
		<property name="ALERT_CATEGORY_OTHER">
			<get />
		</property>

		<property name="ALERT_RESPONSE_SHELTER">
			<get />
		</property>
		<property name="ALERT_RESPONSE_EVACUATE">
			<get />
		</property>
		<property name="ALERT_RESPONSE_PREPARE">
			<get />
		</property>
		<property name="ALERT_RESPONSE_EXECUTE">
			<get />
		</property>
		<property name="ALERT_RESPONSE_MONITOR">
			<get />
		</property>
		<property name="ALERT_RESPONSE_NONE">
			<get />
		</property>

		<property name="ALERT_URGENCY_IMMEDIATE">
			<get />
		</property>
		<property name="ALERT_URGENCY_EXPECTED">
			<get />
		</property>
		<property name="ALERT_URGENCY_FUTURE">
			<get />
		</property>
		<property name="ALERT_URGENCY_PAST">
			<get />
		</property>
		<property name="ALERT_URGENCY_UNKNOWN">
			<get />
		</property>

		<property name="ALERT_SEVERITY_EXTREME">
			<get />
		</property>
		<property name="ALERT_SEVERITY_SEVERE">
			<get />
		</property>
		<property name="ALERT_SEVERITY_MODERATE">
			<get />
		</property>
		<property name="ALERT_SEVERITY_MINOR">
			<get />
		</property>
		<property name="ALERT_SEVERITY_UNKNOWN">
			<get />
		</property>

		<property name="ALERT_CERTAINTY_OBSERVED">
			<get />
		</property>
		<property name="ALERT_CERTAINTY_LIKELY">
			<get />
		</property>
		<property name="ALERT_CERTAINTY_POSSIBLE">
			<get />
		</property>
		<property name="ALERT_CERTAINTY_UNLIKELY">
			<get />
		</property>
		<property name="ALERT_CERTAINTY_UNKNOWN">
			<get />
		</property>

	</public>

	<script language="JScript">
	<![CDATA[

	//**Start Encode**

	/*********************************
	 * Error codes
	 *********************************/
	var E_OK 			 = 1;
	var E_ERROR 		 = 0;
	var E_NOTAVAILABLE   = -1;
	var E_NOTIMPLEMENTED = -2;
	var E_INVALIDLICENSE = -3;
	var E_PARSEERROR	 = -4;
	var E_WARNING		 = -100;

	function get_E_OK() {
		return E_OK;
	}

	function get_E_ERROR() {
		return E_ERROR;
	}

	function get_E_NOTAVAILABLE() {
		return E_NOTAVAILABLE;
	}

	function get_E_NOTIMPLEMENTED() {
		return E_NOTIMPLEMENTED;
	}

	function get_E_INVALIDLICENSE() {
		return E_INVALIDLICENSE;
	}

	function get_E_PARSEERROR() {
		return E_PARSEERROR;
	}

	function get_E_WARNING() {
		return E_WARNING;
	}

	/*********************************
	 * Day part
	 *********************************/
	var DAYPART_DAY = 1;
	var DAYPART_NIGHT = 2;

	function get_DAYPART_DAY() {
		return DAYPART_DAY;
	}

	function get_DAYPART_NIGHT() {
		return DAYPART_NIGHT;
	}

	/*********************************
	 * Icons
	 *********************************/

	var ICON_TORNADO					 = "00";
	var ICON_TROPICAL_STORM				 = "01";
	var ICON_HURRICANE					 = "02";
	var ICON_SEVERE_THUNDERSTORMS		 = "03";
	var ICON_THUNDERSTORMS				 = "04";
	var ICON_MIXED_RAIN_AND_SNOW		 = "05";
	var ICON_MIXED_RAIN_AND_SLEET		 = "06";
	var ICON_MIXED_SNOW_AND_SLEET		 = "07";
	var ICON_FREEZING_DRIZZLE			 = "08";
	var ICON_DRIZZLE					 = "09";
	var ICON_FREEZING_RAIN				 = "10";
	var ICON_SHOWERS					 = "11";
	var ICON_SHOWERS_2					 = "12";
	var ICON_SNOW_FLURRIES				 = "13";
	var ICON_LIGHT_SNOW_SHOWERS			 = "14";
	var ICON_BLOWING_SNOW				 = "15";
	var ICON_SNOW						 = "16";
	var ICON_HAIL						 = "17";
	var ICON_SLEET						 = "18";
	var ICON_DUST						 = "19";
	var ICON_FOGGY						 = "20";
	var ICON_HAZE						 = "21";
	var ICON_SMOKY						 = "22";
	var ICON_BLUSTERY					 = "23";
	var ICON_WINDY						 = "24";
	var ICON_COLD						 = "25";
	var ICON_CLOUDY						 = "26";
	var ICON_MOSTLY_CLOUDY_NIGHT		 = "27";
	var ICON_MOSTLY_CLOUDY_DAY			 = "28";
	var ICON_PARTLY_CLOUDY_NIGHT 		 = "29";
	var ICON_PARTLY_CLOUDY_DAY			 = "30";
	var ICON_CLEAR_NIGHT				 = "31";
	var ICON_SUNNY						 = "32";
	var ICON_FAIR_NIGHT					 = "33";
	var ICON_FAIR_DAY					 = "34";
	var ICON_MIXED_RAIN_AND_HAIL		 = "35";
	var ICON_HOT						 = "36";
	var ICON_ISOLATED_THUNDERSTORMS		 = "37";
	var ICON_SCATTERED_THUNDERSTORMS_1	 = "38";
	var ICON_SCATTERED_THUNDERSTORMS_2	 = "39";
	var ICON_SCATTERED_SHOWERS 			 = "40";
	var ICON_HEAVY_SNOW_1				 = "41";
	var ICON_SCATTERED_SNOW_SHOWERS		 = "42";
	var ICON_HEAVY_SNOW_2				 = "43";
	var ICON_PARTLY_CLOUDY				 = "44";
	var ICON_THUNDERSHOWERS				 = "45";
	var ICON_SNOW_SHOWERS				 = "46";
	var ICON_ISOLATED_THUNDERSHOWERS	 = "47";
	var ICON_NOT_AVAILABLE				 = "NA";

	function get_ICON_TORNADO() {
		return ICON_TORNADO;
	}
	function get_ICON_TROPICAL_STORM() {
		return ICON_TROPICAL_STORM;
	}
	function get_ICON_HURRICANE() {
		return ICON_HURRICANE;
	}
	function get_ICON_SEVERE_THUNDERSTORMS() {
		return ICON_SEVERE_THUNDERSTORMS;
	}
	function get_ICON_THUNDERSTORMS() {
		return ICON_THUNDERSTORMS;
	}
	function get_ICON_MIXED_RAIN_AND_SNOW() {
		return ICON_MIXED_RAIN_AND_SNOW;
	}
	function get_ICON_MIXED_RAIN_AND_SLEET() {
		return ICON_MIXED_RAIN_AND_SLEET;
	}
	function get_ICON_MIXED_SNOW_AND_SLEET() {
		return ICON_MIXED_SNOW_AND_SLEET;
	}
	function get_ICON_FREEZING_DRIZZLE() {
		return ICON_FREEZING_DRIZZLE;
	}
	function get_ICON_DRIZZLE() {
		return ICON_DRIZZLE;
	}
	function get_ICON_FREEZING_RAIN() {
		return ICON_FREEZING_RAIN;
	}
	function get_ICON_SHOWERS() {
		return ICON_SHOWERS;
	}
	function get_ICON_SHOWERS_2() {
		return ICON_SHOWERS_2;
	}
	function get_ICON_SNOW_FLURRIES() {
		return ICON_SNOW_FLURRIES;
	}
	function get_ICON_LIGHT_SNOW_SHOWERS() {
		return ICON_LIGHT_SNOW_SHOWERS;
	}
	function get_ICON_BLOWING_SNOW() {
		return ICON_BLOWING_SNOW;
	}
	function get_ICON_SNOW() {
		return ICON_SNOW;
	}
	function get_ICON_HAIL() {
		return ICON_HAIL;
	}
	function get_ICON_SLEET() {
		return ICON_SLEET;
	}
	function get_ICON_DUST() {
		return ICON_DUST;
	}
	function get_ICON_FOGGY() {
		return ICON_FOGGY;
	}
	function get_ICON_HAZE() {
		return ICON_HAZE;
	}
	function get_ICON_SMOKY() {
		return ICON_SMOKY;
	}
	function get_ICON_BLUSTERY() {
		return ICON_BLUSTERY;
	}
	function get_ICON_WINDY() {
		return ICON_WINDY;
	}
	function get_ICON_COLD() {
		return ICON_COLD;
	}
	function get_ICON_CLOUDY() {
		return ICON_CLOUDY;
	}
	function get_ICON_MOSTLY_CLOUDY_NIGHT() {
		return ICON_MOSTLY_CLOUDY_NIGHT;
	}
	function get_ICON_MOSTLY_CLOUDY_DAY() {
		return ICON_MOSTLY_CLOUDY_DAY;
	}
	function get_ICON_PARTLY_CLOUDY_NIGHT() {
		return ICON_PARTLY_CLOUDY_NIGHT;
	}
	function get_ICON_PARTLY_CLOUDY_DAY() {
		return ICON_PARTLY_CLOUDY_DAY;
	}
	function get_ICON_CLEAR_NIGHT() {
		return ICON_CLEAR_NIGHT;
	}
	function get_ICON_SUNNY() {
		return ICON_SUNNY;
	}
	function get_ICON_FAIR_NIGHT() {
		return ICON_FAIR_NIGHT;
	}
	function get_ICON_FAIR_DAY() {
		return ICON_FAIR_DAY;
	}
	function get_ICON_MIXED_RAIN_AND_HAIL() {
		return ICON_MIXED_RAIN_AND_HAIL;
	}
	function get_ICON_HOT() {
		return ICON_HOT;
	}
	function get_ICON_ISOLATED_THUNDERSTORMS() {
		return ICON_ISOLATED_THUNDERSTORMS;
	}
	function get_ICON_SCATTERED_THUNDERSTORMS_1() {
		return ICON_SCATTERED_THUNDERSTORMS_1;
	}
	function get_ICON_SCATTERED_THUNDERSTORMS_2() {
		return ICON_SCATTERED_THUNDERSTORMS_2;
	}
	function get_ICON_SCATTERED_SHOWERS() {
		return ICON_SCATTERED_SHOWERS;
	}
	function get_ICON_HEAVY_SNOW_1() {
		return ICON_HEAVY_SNOW_1;
	}
	function get_ICON_SCATTERED_SNOW_SHOWERS() {
		return ICON_SCATTERED_SNOW_SHOWERS;
	}
	function get_ICON_HEAVY_SNOW_2() {
		return ICON_HEAVY_SNOW_2;
	}
	function get_ICON_PARTLY_CLOUDY() {
		return ICON_PARTLY_CLOUDY;
	}
	function get_ICON_THUNDERSHOWERS() {
		return ICON_THUNDERSHOWERS;
	}
	function get_ICON_SNOW_SHOWERS() {
		return ICON_SNOW_SHOWERS;
	}
	function get_ICON_ISOLATED_THUNDERSHOWERS() {
		return ICON_ISOLATED_THUNDERSHOWERS;
	}
	function get_ICON_NOT_AVAILABLE() {
		return ICON_NOT_AVAILABLE;
	}

	/*********************************
	 * Alerts
	 *********************************/

	 var ALERT_STATUS_ACTUAL 			= "Actual";
	 var ALERT_STATUS_EXERCISE 			= "Exercise";
	 var ALERT_STATUS_SYSTEM 			= "System";
	 var ALERT_STATUS_TEST 				= "Test";
	 var ALERT_STATUS_DRAFT 			= "Draft";

	 var ALERT_MSG_ALERT 				= "Alert";
	 var ALERT_MSG_UPDATE 				= "Update";
	 var ALERT_MSG_CANCEL 				= "Cancel";
	 var ALERT_MSG_ACK 					= "Ack";
	 var ALERT_MSG_ERROR 				= "Error";

	 var ALERT_SCOPE_PUBLIC 			= "Public";
	 var ALERT_SCOPE_RESTRICTED			= "Restricted";
	 var ALERT_SCOPE_PRIVATE 			= "Private";

	 var ALERT_CATEGORY_GEO 			= "Geo";
	 var ALERT_CATEGORY_MET 			= "Met";
	 var ALERT_CATEGORY_SAFETY 			= "Safety";
	 var ALERT_CATEGORY_SECURITY 		= "Security";
	 var ALERT_CATEGORY_RESCUE 			= "Rescue";
	 var ALERT_CATEGORY_FIRE 			= "Fire";
	 var ALERT_CATEGORY_HEALTH 			= "Health";
	 var ALERT_CATEGORY_ENV 			= "Env";
	 var ALERT_CATEGORY_TRANSPORT 		= "Transport";
	 var ALERT_CATEGORY_INFRA 			= "Infra";
	 var ALERT_CATEGORY_CBRNE 			= "CBRNE";
	 var ALERT_CATEGORY_OTHER 			= "Other";

	 var ALERT_RESPONSE_SHELTER 		= "Shelter";
	 var ALERT_RESPONSE_EVACUATE 		= "Evacuate";
	 var ALERT_RESPONSE_PREPARE			= "Prepare";
	 var ALERT_RESPONSE_EXECUTE 		= "Execute";
	 var ALERT_RESPONSE_MONITOR 		= "Monitor";
	 var ALERT_RESPONSE_NONE 			= "None";

	 var ALERT_URGENCY_IMMEDIATE 		= "Immediate";
	 var ALERT_URGENCY_EXPECTED 		= "Expected";
	 var ALERT_URGENCY_FUTURE 			= "Future";
	 var ALERT_URGENCY_PAST 			= "Past";
	 var ALERT_URGENCY_UNKNOWN 			= "Unknown";

	 var ALERT_SEVERITY_EXTREME 		= "Extreme";
	 var ALERT_SEVERITY_SEVERE 			= "Severe";
	 var ALERT_SEVERITY_MODERATE 		= "Moderate";
	 var ALERT_SEVERITY_MINOR 			= "Minor";
	 var ALERT_SEVERITY_UNKNOWN 		= "Unknown";

	 var ALERT_CERTAINTY_OBSERVED 		= "Observed";
	 var ALERT_CERTAINTY_LIKELY			= "Likely";
	 var ALERT_CERTAINTY_POSSIBLE 		= "Possible";
	 var ALERT_CERTAINTY_UNLIKELY 		= "Unlikely";
	 var ALERT_CERTAINTY_UNKNOWN 		= "Unknown";


	 function get_ALERT_STATUS_ACTUAL() {
		return ALERT_STATUS_ACTUAL;
	 }
	 function get_ALERT_STATUS_EXERCISE() {
		return ALERT_STATUS_EXERCISE;
	 }
	 function get_ALERT_STATUS_SYSTEM() {
		return ALERT_STATUS_SYSTEM;
	 }
	 function get_ALERT_STATUS_TEST() {
		return ALERT_STATUS_TEST;
	 }
	 function get_ALERT_STATUS_DRAFT() {
		return ALERT_STATUS_DRAFT;
	 }

	 function get_ALERT_MSG_ALERT() {
		return ALERT_MSG_ALERT;
	 }
	 function get_ALERT_MSG_UPDATE() {
		return ALERT_MSG_UPDATE;
	 }
	 function get_ALERT_MSG_CANCEL() {
		return ALERT_MSG_CANCEL;
	 }
	 function get_ALERT_MSG_ACK() {
		return ALERT_MSG_ACK;
	 }
	 function get_ALERT_MSG_ERROR() {
		return ALERT_MSG_ERROR;
	 }

	 function get_ALERT_SCOPE_PUBLIC() {
		return ALERT_SCOPE_PUBLIC;
	 }
	 function get_ALERT_SCOPE_RESTRICTED() {
		return ALERT_SCOPE_RESTRICTED;
	 }
	 function get_ALERT_SCOPE_PRIVATE() {
		return ALERT_SCOPE_PRIVATE;
	 }

	 function get_ALERT_CATEGORY_GEO() {
		return ALERT_CATEGORY_GEO;
	 }
	 function get_ALERT_CATEGORY_MET() {
		return ALERT_CATEGORY_MET;
	 }
	 function get_ALERT_CATEGORY_SAFETY() {
		return ALERT_CATEGORY_SAFETY;
	 }
	 function get_ALERT_CATEGORY_SECURITY() {
		return ALERT_CATEGORY_SECURITY;
	 }
	 function get_ALERT_CATEGORY_RESCUE() {
		return ALERT_CATEGORY_RESCUE;
	 }
	 function get_ALERT_CATEGORY_FIRE() {
		return ALERT_CATEGORY_FIRE;
	 }
	 function get_ALERT_CATEGORY_HEALTH() {
		return ALERT_CATEGORY_HEALTH;
	 }
	 function get_ALERT_CATEGORY_ENV() {
		return ALERT_CATEGORY_ENV;
	 }
	 function get_ALERT_CATEGORY_TRANSPORT() {
		return ALERT_CATEGORY_TRANSPORT;
	 }
	 function get_ALERT_CATEGORY_INFRA() {
		return ALERT_CATEGORY_INFRA;
	 }
	 function get_ALERT_CATEGORY_CBRNE() {
		return ALERT_CATEGORY_CBRNE;
	 }
	 function get_ALERT_CATEGORY_OTHER() {
		return ALERT_CATEGORY_OTHER;
	 }

	 function get_ALERT_RESPONSE_SHELTER() {
		return ALERT_RESPONSE_SHELTER;
	 }
	 function get_ALERT_RESPONSE_EVACUATE() {
		return ALERT_RESPONSE_EVACUATE;
	 }
	 function get_ALERT_RESPONSE_PREPARE() {
		return ALERT_RESPONSE_PREPARE;
	 }
	 function get_ALERT_RESPONSE_EXECUTE() {
		return ALERT_RESPONSE_EXECUTE;
	 }
	 function get_ALERT_RESPONSE_MONITOR() {
		return ALERT_RESPONSE_MONITOR;
	 }
	 function get_ALERT_RESPONSE_NONE() {
		return ALERT_RESPONSE_NONE;
	 }

	 function get_ALERT_URGENCY_IMMEDIATE() {
		return ALERT_URGENCY_IMMEDIATE;
	 }
	 function get_ALERT_URGENCY_EXPECTED() {
		return ALERT_URGENCY_EXPECTED;
	 }
	 function get_ALERT_URGENCY_FUTURE() {
		return ALERT_URGENCY_FUTURE;
	 }
	 function get_ALERT_URGENCY_PAST() {
		return ALERT_URGENCY_PAST;
	 }
	 function get_ALERT_URGENCY_UNKNOWN() {
		return ALERT_URGENCY_UNKNOWN;
	 }

	 function get_ALERT_SEVERITY_EXTREME() {
		return ALERT_SEVERITY_EXTREME;
	 }
	 function get_ALERT_SEVERITY_SEVERE() {
		return ALERT_SEVERITY_SEVERE;
	 }
	 function get_ALERT_SEVERITY_MODERATE() {
		return ALERT_SEVERITY_MODERATE;
	 }
	 function get_ALERT_SEVERITY_MINOR() {
		return ALERT_SEVERITY_MINOR;
	 }
	 function get_ALERT_SEVERITY_UNKNOWN() {
		return ALERT_SEVERITY_UNKNOWN;
	 }

	 function get_ALERT_CERTAINTY_OBSERVED() {
		return ALERT_CERTAINTY_OBSERVED;
	 }
	 function get_ALERT_CERTAINTY_LIKELY() {
		return ALERT_CERTAINTY_LIKELY;
	 }
	 function get_ALERT_CERTAINTY_POSSIBLE() {
		return ALERT_CERTAINTY_POSSIBLE;
	 }
	 function get_ALERT_CERTAINTY_UNLIKELY() {
		return ALERT_CERTAINTY_UNLIKELY;
	 }
	 function get_ALERT_CERTAINTY_UNKNOWN() {
		return ALERT_CERTAINTY_UNKNOWN;
	 }


	]]>
	</script>

</component>

<component id="WeatherInfo">
	<comment>
	Weather information
	</comment>
	<registration description="Weather Information"
				  progid="DXWeather.Info"
				  version="1"
				  classid="{30EC2AE5-702A-4b2d-94BB-6CE09B399931}"/>

	<public>
		<comment>
			Weather location info (WeatherLocation object)
		</comment>
		<property name="Location" 				internalName="m_location" />

		<comment>
			Weather station name
		</comment>
		<property name="Station" 				internalName="m_station" />

		<comment>
			Weather station type
		</comment>
		<property name="Type" 					internalName="m_type" />

		<comment>
			Weather info links (WeatherLinks object)
		</comment>
		<property name="Links" 					internalName="m_links" />

		<property name="Description"	 		internalName="m_description" />
		<property name="Code" 					internalName="m_code" />

		<property name="Date" 					internalName="m_date" />

		<property name="Temperature" 			internalName="m_temperature" />
		<property name="TemperatureFeel" 		internalName="m_temperatureFeel" />

		<property name="Humidity" 				internalName="m_humidity" />

		<property name="Precipitation1H" 		internalName="m_precipitation_1h" />
		<property name="PrecipitationToday" 	internalName="m_precipitation_today" />

		<property name="Visibility" 			internalName="m_visibility" />

		<property name="WindDescription" 		internalName="m_windDescription" />
		<property name="WindDirection" 			internalName="m_windDirection" />
		<property name="WindDegrees" 			internalName="m_windDegrees" />
		<property name="WindSpeed" 				internalName="m_windSpeed" />
		<property name="WindGust" 				internalName="m_windGust" />

		<property name="WindChillDescription" 	internalName="m_windChillDescription" />
		<property name="WindChill" 				internalName="m_windChill" />

		<property name="Pressure" 				internalName="m_pressure" />
		<property name="PressureTrend"			internalName="m_pressure" />

		<property name="DewPointDescription" 	internalName="m_dewPointDescription" />
		<property name="DewPoint" 				internalName="m_dewPoint" />

		<property name="HeatDescription" 		internalName="m_heatDescription" />
		<property name="HeatIndex" 				internalName="m_heatIndex" />

		<property name="SolarRadiation" 		internalName="m_solarRadiation" />
		<property name="UV" 					internalName="m_UV" />
		<property name="UVDescription"			internalName="m_UVDescription" />

		<property name="Sunrise" 				internalName="m_sunrise" />
		<property name="Sunset"					internalName="m_sunset" />

		<property name="MoonPhaseDescription" 	internalName="m_moonPhaseDescription" />
		<property name="MoonPhaseCode" 			internalName="m_moonPhaseCode" />
		<property name="MoonIlluminated" 		internalName="m_moonIlluminated" />
		<property name="MoonAge" 				internalName="m_moonAge" />

		<property name="DayOfWeek" 				internalName="m_dayOfWeek" />
		<property name="DayPart" 				internalName="m_dayPart" />

		<property name="ForecastDescription" 	internalName="m_forecastDescription" />
		<property name="ForecastHigh"			internalName="m_forecastHigh" />
		<property name="ForecastLow" 			internalName="m_forecastLow" />

		<property name="UseMetricSystem" 		internalName="m_useMetricSystem" />


		<comment>
			Time when this object was retrieved (used for caching purposes)
		</comment>
		<property name="LastUpdateTime" 		internalName="m_lastUpdateTime" />

		<method name="ToString" />

	</public>

	<script language="JScript">
	<![CDATA[

	//**Start Encode**

	/*********************************
	 * Properties
	 *********************************/
	var m_useMetricSystem = true;


	// Weather data
	var m_location = null;
	var m_links    = null;

	var m_station = null;
	var m_type = null;

	var m_description = null;
	var m_code = null;

	var m_temperature = null;
	var m_temperatureFeel = null;

	var m_humidity = null;
	var m_precipitation_1h = null;
	var m_precipitation_today = null;

	var m_visibility = null;

	var m_windDescription = null;
	var m_windDirection = null;
	var m_windDegrees = null;
	var m_windSpeed = null;
	var m_windGust = null;

	var m_windChillDescription = null;
	var m_windChill = null;

	var m_pressure = null;
	var m_pressureTrend = null;

	var m_dewPointDescription = null;
	var m_dewPoint = null;

	var m_heatDescription = null;
	var m_heatIndex = null;

	var m_solarRadiation = null;
	var m_UV = null;
	var m_UVDescription = null;

	var m_sunrise = null;
	var m_sunset = null;

	var m_moonPhaseDescription = null;
	var m_moonPhaseCode = null;
	var m_moonIlluminated = null;
	var m_moonAge = null;

	var m_dayOfWeek = null;
	var m_dayPart = null;
	var m_date = null;

	var m_forecastDescription = null;
	var m_forecastCode = null;
	var m_forecastHigh = null;
	var m_forecastLow = null;

	var m_lastUpdateTime = null;

	/*********************************
	 * Functions
	 *********************************/
	function ToString() {
		var text = "";

		if (m_location != null)
			text += m_location.ToString();

		if (text != "")
			 text += "\n";

		// Station name & type
		text += append("Station", m_station);
		text += append("Type", m_type);

		// Description
		text += append("Description", m_description);
		text += append("Code", m_code);

		// Date & Time
		if (m_date != null)
			text += append("Date", m_date.format("%A, %c %Z"));

		// Temperature / Humidity / Precipitation / Visibility
		text += append("Temperature", m_temperature);
		text += append("Temperature (Feel)", m_temperatureFeel);
		text += append("Humidity", m_humidity);
		text += append("Precipitation (1h)", m_precipitation_1h);
		text += append("Precipitation (today)", m_precipitation_today);
		text += append("Visibility", m_visibility);

		// Wind
		text += append("Wind Description", m_windDescription);
		text += append("Direction", m_windDirection);
		text += append("Degrees", m_windDegrees);
		text += append("Speed", m_windSpeed);
		text += append("Gust", m_windGust);
		text += append("WindChill Description", m_windChillDescription);
		text += append("Chill", m_windChill);

		// Pressure / Dew Point / Heat
		text += append("Pressure", m_pressure);
		text += append("Pressure Trend", m_pressure);
		text += append("DewPoint Description", m_dewPointDescription);
		text += append("DewPoint", m_dewPoint);
		text += append("Heat Description", m_heatDescription);
		text += append("Heat Index", m_heatIndex);

		// Solar Radiation & UV
		text += append("Solar Radiation", m_solarRadiation);
		text += append("UV Description", m_UVDescription);
		text += append("UV", m_UV);

		text += append("Day of week", m_dayOfWeek);

		if (m_dayPart != null)
		{
			if (m_dayPart == 1)
				text += append("Day part", "Day");
			else if (m_dayPart == 2)
				text += append("Day part", "Night");
			else
				text += append("Day part", "Invalid!");
		}

		text += append("Forecast", m_forecastDescription);
		text += append("High", m_forecastHigh);
		text += append("Low", m_forecastLow);

		// Sunrise / Sunset / Moon / Day
		if (m_sunrise != null)
			text += append("Sunrise", m_sunrise.format("%r"));
		if (m_sunset != null)
			text += append("Sunset", m_sunset.format("%r"));

		text += append("Moonphase", m_moonPhaseDescription);
		text += append("Moon Code", m_moonPhaseCode);
		text += append("Moon Illumination", m_moonIlluminated);
		text += append("Moon Age", m_moonAge);

		if (m_links != null) {
			var links = m_links.ToString();

			if (links != "")
				text += "\n" + links;
		}

		return text;
	}

	function append(title, value) {
		if (value == null || value == "")
			return "";

		return title + ": " + value + "\n";
	}

	]]>
	</script>

</component>

<component id="WeatherAlert">
	<comment>
	Weather alert container
	</comment>
	<registration description="Weather alert"
				  progid="DXWeather.Alert"
				  version="1"
				  classid="{D4F984BF-A90A-45da-A695-ACBD974B9924}"/>

	<public>
		<property name="Status" 		internalName="m_status" />
		<property name="Type" 			internalName="m_type" />
		<property name="Category" 		internalName="m_category" />
		<property name="Urgency" 		internalName="m_urgency" />
		<property name="Severity" 		internalName="m_severity" />
		<property name="Certainty" 		internalName="m_certainty" />

		<property name="Area" 			internalName="m_area" />

		<property name="Title" 			internalName="m_title" />
		<property name="Summary" 		internalName="m_summary" />
		<property name="Effective" 		internalName="m_effective" />
		<property name="Expiration" 	internalName="m_expiration" />

		<method name="ToString" />
	</public>

	<script language="JScript">
	<![CDATA[

	//**Start Encode**

	var m_status = null;
	var m_type = null;
	var m_category = null;
	var m_urgency = null;
	var m_severity = null;
	var m_certainty = null;

	var m_area = null;

	var m_title = null;
	var m_summary = null;
	var m_effective = null;
	var m_expiration = null;

	function ToString() {
		var text = "";

		text += append("Status", m_status);
		text += append("Type", m_type);
		text += append("Category", m_category);
		text += append("Urgency", m_urgency);
		text += append("Severity", m_severity);
		text += append("Certainty", m_certainty);

		text += append("Area", m_area);

		text += append("Title", m_title);
		text += append("Summary", m_summary);

		if (m_effective != null && m_effective != "")
			text += append("Effective", m_effective.format("%A, %c %Z"));

		if (m_expiration != null && m_expiration != "")
			text += append("Expiration", m_expiration.format("%A, %c %Z"));


		return text;
	}

	function append(title, value) {
		if (value == null || value == "")
			return "";

		return title + ": " + value + "\n";
	}

	]]>
	</script>

</component>

<component id="WeatherCamera">
	<comment>
	Weather camera container
	</comment>
	<registration description="Weather camera"
				  progid="DXWeather.Camera"
				  version="1"
				  classid="{4B4C0F6A-0888-4963-B432-B8F4DF38D8CB}"/>

	<public>
		<property name="Handle" 		internalName="m_handle" />
		<property name="ID" 			internalName="m_ID" />
		<property name="StationID" 		internalName="m_stationID" />
		<property name="Type" 			internalName="m_type" />
		<property name="Organization" 	internalName="m_organization" />
		<property name="Location"		internalName="m_location" />
		<property name="Updated" 		internalName="m_updated" />
		<property name="IsRecent" 		internalName="m_isRecent" />
		<property name="UrlImage" 		internalName="m_urlImage" />
		<property name="UrlWidgetImage" internalName="m_urlWidgetImage" />
		<property name="UrlCamera" 		internalName="m_urlCamera" />

		<comment>
			Time when this object was retrieved (used for caching purposes)
		</comment>
		<property name="LastUpdateTime" 		internalName="m_lastUpdateTime" />

		<method name="ToString" />
	</public>

	<script language="JScript">
	<![CDATA[

	//**Start Encode**

	var m_handle = null;
	var m_ID = null;
	var m_stationID = null;
	var m_type = null;
	var m_organization = null;
	var m_location = null;
	var m_updated = null;
	var m_isRecent = null;
	var m_urlImage = null;
	var m_urlWidgetImage = null;
	var m_urlCamera = null;

	var m_lastUpdateTime = null;

	function ToString() {
		var txt = "";

		txt += append("Handle", 		m_handle);
		txt += append("ID",	 			m_ID);
		txt += append("Station ID", 	m_stationID);
		txt += append("Type",			m_type);
		txt += append("Organization",   m_organization);
		txt += append("IsRecent",		m_isRecent);

		if (m_updated != null && m_updated != "")
			txt += append("Updated", m_updated.format("%A, %c %Z"));

		if (m_location != null)
			txt += m_location.ToString();

		txt += append("Image",  m_urlImage);
		txt += append("Widget", m_urlWidgetImage);
		txt += append("Camera", m_urlCamera);

		return txt;
	}

	function append(title, value) {
		if (value == null || value == "")
			return "";

		return title + ": " + value + "\n";
	}

	]]>
	</script>

</component>

<component id="WeatherLocation">
	<comment>
	Weather location/query container
	</comment>
	<registration description="Weather Location"
				  progid="DXWeather.Location"
				  version="1"
				  classid="{BC017AA1-3732-4d88-89EC-68823C27ECD3}"/>

	<public>
		<property name="ID" 					internalName="m_ID" />
		<property name="Name" 					internalName="m_name" />

		<property name="Country" 				internalName="m_country" />
		<property name="State" 					internalName="m_state" />
		<property name="City" 					internalName="m_city" />
		<property name="Address" 				internalName="m_address" />

		<property name="Timezone" 				internalName="m_timezone" />

		<property name="Latitude" 				internalName="m_latitude" />
		<property name="Longitude" 				internalName="m_longitude" />
		<property name="Elevation" 				internalName="m_elevation" />

		<property name="Distance" 				internalName="m_distance" />

		<property name="AirportCode" 			internalName="m_airportCode" />
		<property name="ZipCode" 				internalName="m_zipCode" />
		<property name="CityCode" 				internalName="m_cityCode" />

		<property name="CustomQueryString" 		internalName="m_customQueryString" />

		<comment>
			Time when this object was retrieved (used for caching purposes)
		</comment>
		<property name="LastUpdateTime" 		internalName="m_lastUpdateTime" />

		<method name="TrimValues" />
		<method name="ToString" />
	</public>

	<script language="JScript">
	<![CDATA[

	//**Start Encode**

	var m_ID = null;

	var m_country = null;
	var m_state = null;
	var m_city = null;
	var m_address = null;

	var m_latitude = null;
	var m_longitude = null;

	var m_airportCode = null;
	var m_zipCode = null;
	var m_cityCode = null;

	var m_customQueryString = null;

	// Results-only data
	var m_name = null;
	var m_timezone = null;
	var m_elevation = null;
	var m_distance = null;

	var m_lastUpdateTime = null;

	// Trim values used in query
	function TrimValues() {
		// Helper
		var m_helper = createComponent("WeatherHelper");

		m_ID = m_helper.Trim(m_ID);

		m_country = m_helper.Trim(m_country);
		m_state = m_helper.Trim(m_state);
		m_city = m_helper.Trim(m_city);

		m_latitude = m_helper.Trim(m_latitude);
		m_longitude = m_helper.Trim(m_longitude);

		m_airportCode = m_helper.Trim(m_airportCode);
		m_zipCode = m_helper.Trim(m_zipCode);
		m_cityCode = m_helper.Trim(m_cityCode);

		m_customQueryString = m_helper.Trim(m_customQueryString);
	}

	function ToString() {
		var text = "";

		text += append("ID", m_ID)
		text += append("Name", m_name);

		// City
		if ((m_city != "" && m_city != null) ||
			(m_state != "" && m_state != null)  ||
			(m_country != "" && m_country != null)) {
			text += "City: " + m_city;

			if (m_state != "" && m_state != null)
				text += ", " + m_state;

			if (m_country != "" && m_country != null)
				text += " (" + m_country + ")"

			text += "\n";
		}
		text += append("Address", m_address);

		// Coordinates
		if ((m_latitude != "" && m_latitude != null) ||
			(m_longitude != "" && m_longitude != null))
			text += append("Coordinates", m_latitude + ", " + m_longitude);

		// Distance & Elevation
		text += append("Distance", m_distance);
		text += append("Elevation", m_elevation);

		// Codes
		text += append("Zipcode", m_zipCode);
		text += append("Airport", m_airportCode);
		text += append("City Code", m_cityCode);

		text += append("Custom", m_customQueryString);

		return text;
	}

	function append(title, value) {
		if (value == null || value == "")
			return "";

		return title + ": " + value + "\n";
	}

	]]>
	</script>

</component>

<component id="WeatherLinks">
	<comment>
	Weather links container
		- current
		- forecast
		- history
		- credit
		- misc.
	</comment>
	<registration description="Weather Links"
				  progid="DXWeather.Links"
				  version="1"
				  classid="{ABD6A877-1597-4b60-AF0E-DD1D1CEA7683}"/>

	<object id="m_promo" 	progid="Scripting.Dictionary" />

	<public>
		<property name="Current" 		internalName="m_current" />
		<property name="Forecast" 		internalName="m_forecast" />
		<property name="History" 		internalName="m_history" />
		<property name="Credit" 		internalName="m_credit" />
		<property name="Logo" 			internalName="m_logo" />

		<property name="Promo" 			internalName="m_promo" />

		<method name="ToString" />
	</public>

	<script language="JScript">
	<![CDATA[

	//**Start Encode**

	var m_current = null;
	var m_forecast = null;
	var m_history = null;
	var m_credit = null;
	var m_logo = null;

	function ToString() {
		var text = "";

		if (m_current != "" && m_current != null)
			text += "Current: " + m_current + "\n";

		if (m_forecast != "" && m_current != null)
			text += "Forecast: " + m_forecast + "\n";

		if (m_history != "" && m_current != null)
			text += "History: " + m_history + "\n";

		if (m_credit != "" && m_current != null)
			text += "Credit: " + m_credit + "\n";

		if (m_logo != "" && m_current != null)
			text += "Logo: " + m_logo + "\n";

		if (m_promo.Count != 0) {
			text += "Promo links:\n\n";

			var keys = (new VBArray(m_promo.Keys())).toArray();
			var items = (new VBArray(m_promo.Items())).toArray();

			for (i in keys)
				text += keys[i] + " (" + items[i] + ")" + "\n";
		}

		return text;
	}

	]]>
	</script>

</component>

<component id="WeatherHelper">
	<comment>
	Weather Helper functions
	</comment>
	<registration description="Weather Helper"
				  progid="DXWeather.Helper"
				  version="1"
				  classid="{4FBA62F1-7479-42e2-84F1-8DE0927C0DAE}"/>

	<public>

		<comment>
			Convert from C to F (with rounding)
		</comment>
		<method name="CtoF">
			<parameter name="temperature" />
		</method>

		<comment>
			Convert from F to C (with rounding)
		</comment>
		<method name="FtoC">
			<parameter name="temperature" />
		</method>

		<comment>
			Convert from meter to feet (with rounding)
		</comment>
		<method name="MtoFT">
			<parameter name="length" />
		</method>

		<comment>
			Convert from feet to meter (with rounding)
		</comment>
		<method name="FTtoM">
			<parameter name="length" />
		</method>

		<comment>
			Convert from kilometers to miles (with rounding)
		</comment>
		<method name="KMtoMI">
			<parameter name="distance" />
		</method>

		<comment>
			Convert from miles to kilometers (with rounding)
		</comment>
		<method name="MItoKM">
			<parameter name="distance" />
		</method>

		<comment>
			Convert from millibars to inches of mercury (with rounding)
		</comment>
		<method name="MBtoIN">
			<parameter name="pressure" />
		</method>

		<comment>
			Convert from inches of mercury to millibars (with rounding)
		</comment>
		<method name="INtoMB">
			<parameter name="pressure" />
		</method>

		<comment>
			Convert from millimeters to inches (with rounding)
		</comment>
		<method name="MMtoIN">
			<parameter name="length" />
		</method>

		<comment>
			Convert from inches to millimeters (with rounding)
		</comment>
		<method name="INtoMM">
			<parameter name="length" />
		</method>

		<comment>
			Convert from km/h to mp/h (with rounding)
		</comment>
		<method name="KMHtoMPH">
			<parameter name="speed" />
		</method>

		<comment>
			Convert from mp/h to km/h (with rounding)
		</comment>
		<method name="MPHtoKMH">
			<parameter name="speed" />
		</method>

		<comment>
			Remove multiple, leading or trailing spaces
		</comment>
		<method name="Trim">
			<parameter name="s" />
		</method>

		<comment>
			Remove all spaces
		</comment>
		<method name="RemoveSpaces">
			<parameter name="s" />
		</method>

		<comment>
			Check is string is null or empty
		</comment>
		<method name="IsNullOrEmpty">
			<parameter name="str" />
		</method>

		<comment>
			Check XmlDom object for parsing errors and report them
		</comment>
		<method name="CheckParserError">
			<parameter name="request" />
			<parameter name="callback" />
			<parameter name="Constants" />
		</method>

		<comment>
			Try to get a node value and return "" if the node doesn't exists
		</comment>
		<method name="GetNodeValue">
			<parameter name="entry" />
			<parameter name="nodeName" />
		</method>

		<comment>
			Check a cache for value using the passed refresh rate

			returns true if an object is in the cache and up to date
					false otherwise
		</comment>
		<method name="CheckCache">
			<parameter name="cache" />
			<parameter name="id" />
			<parameter name="rate" />
		</method>

	</public>

	<script language="JScript">
	<![CDATA[

	//**Start Encode**

	/////////////////////////////////////////////////////////////////////////////////////////////
	//
	// Misc
	//
	/////////////////////////////////////////////////////////////////////////////////////////////

	function CheckCache(cache, id, rate, isSublevel) {
		// check if item exists in the cache
		if (!cache.Exists(id))
			return false;

		// Get cached item
		var updateTime = null;
		var cachedObject = cache.Item(id);

		// Check for items in a dictionnary under the cache
		if (isSublevel) {
			if (!cachedObject.Exists(0))
				return false;

			updateTime = cachedObject.Item(0).LastUpdateTime;
		} else
			updateTime = cachedObject.LastUpdateTime;

		if (updateTime == null || updateTime == "")
			return false;

		// Check if we are past the refresh time
		var now = updateTime.clone().setTimeToNow();
		var refresh = updateTime.clone().addMinutes(rate);

		// Hmm, something is wrong here!
		if (now.isBefore(updateTime))
			return false;

		// the cache has expired
		if (now.isAfter(refresh))
			return false;

		return true;
	}

	/////////////////////////////////////////////////////////////////////////////////////////////
	//
	// Parsing & XML handling
	//
	/////////////////////////////////////////////////////////////////////////////////////////////

	// Check the request for parser errors
	function CheckParserError(request, callback, Constants) {
		if (request.parseError.errorCode == 0)
			return true;

		if (request.text == "")
			callback(Constants.E_ERROR, "Received empty response!");
		else {
			var error = "Error parsing response xml: Error " + request.parseError.Constants + ": " + request.parseError.reason;
			error += "/ Line " + request.parseError.line + " - position " + request.parseError.linepos;
			error += "/ Source: " + escape(request.parseError.srcText);

			callback(Constants.E_PARSEERROR, error);
		}

		return false;
	}

	// Try to get a node value and return "" if the node doesn't exists
	function GetNodeValue(entry, nodeName) {
		 var node = entry.selectNodes(nodeName);

		 if (node.length == 0)
			return "";

		 return node[0].nodeValue;
	}

	/////////////////////////////////////////////////////////////////////////////////////////////
	//
	// Unit conversion
	//
	/////////////////////////////////////////////////////////////////////////////////////////////

	function CtoF(temperature) {
		return ((9/5) * temperature + 32).toFixed(1);
	}

	function FtoC(temperature) {
		return ((5/9) * (temperature - 32)).toFixed(1);
	}

	function MtoFT(length) {
		return (length * 3.280839895013123).toFixed(0);
	}

	function FTtoM(length) {
		return (length * 0.3048).toFixed(0);
	}

	function KMtoMI(distance) {
		return (distance * 0.621371192237334).toFixed(1);
	}

	function MItoKM(distance) {
		return (distance * 1.609344).toFixed(1);
	}

	function MBtoIN(pressure) {
		return (pressure * 0.0295300).toFixed(2);
	}

	function INtoMB(pressure) {
		return (pressure * 33.8639).toFixed(2);
	}

	function MMtoIN(length) {
		return (length * 0.0393700787401575).toFixed(2);
	}

	function INtoMM(length) {
		return (length * 25.4).toFixed(2);
	}

	function KMHtoMPH(speed) {
		return (speed * 0.621371192237334).toFixed(1);
	}

	function MPHtoKMH(speed) {
		return (speed * 1.609344).toFixed(1);
	}

	/////////////////////////////////////////////////////////////////////////////////////////////
	//
	// Text manipulation
	//
	/////////////////////////////////////////////////////////////////////////////////////////////

	// Remove multiple, leading or trailing spaces
	function Trim(s) {
		if (s == null)
			return null;

		s = s.replace(/(^\s*)|(\s*$)/gi,"");
		s = s.replace(/[ ]{2,}/gi," ");
		s = s.replace(/\n /,"\n");
		return s;
	}

	// Remove all spaces
	function RemoveSpaces(s) {
		if (s == null)
			return null;

		return s.replace(/(\s|\n)+/g,'');
	}

	function IsNullOrEmpty(str) {
		if (str == null)
			return true;

		if (typeof(str) != "string")
			return false;

		return (str == "");
	}

	]]>
	</script>

</component>

<comment>
#includecomponent "../I18N/DateEx.wsc"
#includecomponent "Providers/WUnderground.wsc"
#includecomponent "Providers/TWC.wsc"
#includecomponent "Providers/NOAA.wsc"
</comment>

</package>
